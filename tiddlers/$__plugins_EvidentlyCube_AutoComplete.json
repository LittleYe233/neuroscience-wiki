{"tiddlers":{"$:/plugins/EvidentlyCube/Common/Settings":{"tags":"$:/tags/ControlPanel","caption":"Evidently Cube","text":"! Evidently Cube plugins Settings\n\nBelow are settings for all Evidently Cube plugins.\n\n<$macrocall tabsList=\"[all[shadows+tiddlers]tag[$:/tags/EvidentlyCube/SettingsTab]!is[draft]sort[]]\"default={{{[[$:/tags/EvidentlyCube/SettingsTab]tagging[]!is[draft]sort[]nth[]]}}}$name=tabs/>\n"},"$:/plugins/EvidentlyCube/AutoComplete/history":{"type":"text/vnd.tiddlywiki","text":"* ''1.0.18'':\n** Fixed RSOD in TW 5.3.0+ caused by new API not being supported\n** Fixed RSOD when earlier keyup causes the focus to be changed -- can be triggered by setting `sidebar-search` shortcut to the same key as manually triggering auto complete.\n* ''1.0.17'' -- Variable `editedTiddler` can now be used in //Suggestion Filter// and //Display Filter//\n* ''1.0.16'' -- The two `<p>` tags that were wrapping around the auto complete window have been reduced to a single `<p>` tag.\n* ''1.0.15'':\n** ''Code Mirror integration:'' No longer throws an exception when triggering completion in non-codemirror input when codemirror editor is opened\n** ''Code Mirror integration:'' Completion opens at the correct position even when window is scrolled\n** ''Code Mirror integration:'' No longer throws an exception when selecting an option with mouse in non-codemirror input when codemirror editor is opened\n* ''1.0.14'':\n** Fixed a bug where navigating through auto completion would still trigger TW's keyboard widgets eg. navigating auto completion in sidebar search would also change selected search result\n** The list of suggestion can now be scrolled down using the keyboard.\n* ''1.0.13'' -- Added caption to triggers to improve how they are displayed in the settings\n* ''1.0.12'' -- Various small fixes and tweaks to problems introduced between 1.0.9 and 1.0.11.\n* ''1.0.11'' -- This plugin now takes preference over `codemirror-autocomplete` and will prevent the code mirror Auto Complete from opening at the same time as this\n* ''1.0.10'' -- No longer crashes when using together with a Twitter plugin or any other plugin which delays the execution of the `startup` module\n* ''1.0.9'' -- Using mouse for Auto Complete now works in tiddlers opened in a separate window\n* ''1.0.8'' -- Auto Complete now works gracefully with `codemirror-closebrackets` plugin\n* ''1.0.7'' -- Auto Complete now only opens in the window in which it was invoked when using Side Editor plugin or just opening a tiddler in a new window\n* ''1.0.6'':\n** If you use Auto Complete in a text area that is scrolled, Auto Complete window will now be correctly positioned.\n** If you use framed editor but the main window was scrolled, Auto Complete window will now be correctly positioned\n** Fixed incorrect placeholder for description field\n** Changed the default trigger slightly\n* ''1.0.5'' -- Auto Complete now also opens in tiddlers opened in a new window\n* ''1.0.4'' -- Added `Transform Filter` option to triggers which allows transforming the suggestion before it is inserted (eg to insert a field value instead)\n* ''1.0.3'' -- Added compatibility with Streams - this plugin's Enter takes priority over Streams's Enter\n* ''1.0.2'' -- Upped version because issue\n* ''1.0.1'' -- Added `z-index` to CSS so the completion always (tries to) appear at the top\n* ''1.0.0'' -- Initial release"},"$:/plugins/EvidentlyCube/AutoComplete/icon":{"text":"iVBORw0KGgoAAAANSUhEUgAAACMAAAAjCAYAAAAe2bNZAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAELklEQVRYhc2X309bZRjHP+/hnNIC2nXt5hYjrJHR8cOR1CiRBBISk6FGE2JK1JtdmEi4IPPKkOwf2D9g8ErTW27UC4WYGJRVL7xAN2DJ4hjMDRI2VmiRdqenPa8Xb1fa0gIt0PhNTs573vd9nvdznve3kFJK/ifSnyeSySRzc3OkUqmaNe5wOAgGg7hcrl2YZDJJf38/fr8fj8dTsVMpJaZp4nQ6K7Lb3NxkeXmZ2dlZBSSllJFIRIZCIWnbtqxGa2trcmxsrGI727ZlKBSSkUhESimlDpBKpfB4PFiWxfXr14nH4wV/cOXKFVZXV1lYWKClpYWOjg6mpqYA0DSNnp4e7ty5U3FEhRB4PJ7c0MiNGSkluq4zNDSEaZoFRn6/n7a2Nrq6unC73fh8Ptxud86hYRgVg+S3+1w6gNfrZXFxEcuy6O3tPZST5ubmXHp7e5uRkZGKQUzTZHFxEa/XC4DIdh83btxgenr6SH9ZqSzLYnBwkPHxcYQQCgZUuJLJJOl0umYwuq7jcrkQQqhvANu2CYfDTE5OYllWzWAMw2B4eJirV6+iaZqCmZ+fJxwOMzExgcPhqBlMKpVidHSUYDBId3e3golGowQCAdrb28nYkCnaIAwNbLk3vxIZGqQlIEHXINszBAIBotEokDe1AVIZ+Pwn2Cqc2XxwER7G4c/16mE+6YQfl+BZGq69Ad0v7a1TAOOogy/fUfT5EiKbdYTICAHvte6mS6kAxpZwL5oNZ5E8TjDTkMhONpeu4GN5URTAhVOqrBzQftoD88sD2C6xcQfPweYzWN5S3y+/AL4GuJXXdboGH3eWhzlIBWa6Bp8FK3Pwtr+6hg+EsSX8/kh1R76EgOIjmBDwqgce70C8aMDn12n1QLO7CpiMDb89LO+8WIYGC0/gUbx0uRBqXFUMs7IFP9yDgPdwhgBPk3C+ST3ltJGA7+6WL1/ZKgHz8wr8+i1cPgvObO5yDLwueLFoUZbA3afQ4laDdX0HHsSpauqnV2C8GCZjQx0w3AHuepU3tQTtPrhQIszh2/D+RTjtgj/W4JvbykfFyrPJwbT7oO8y/B3dLTzToMK8kdjro/MM3N9Sjybg0+4qQICbkRIwfc3w1bvwNAFpG5ocanYlspu4Uwe3Uy1sx6mR70vAgIL4+pZa9PpeUe+/1hVAmxc+6lBr0UmpAMbQ4Iu3Cit8eOnkGt8XJiPh5j9q995Pr52F+5uwU+Icdq5JzcgjwwA8ScC/B1wqL3khmoSN5N6ypiOczQpg6gSE2g9neNhVtWqYjJ09ABWFXwh4/Tz4Tx0/QFkYiRoLxd0kBLSePlmQHIxhGMRiMeqE5Nqbx72S7K9YLJa7qwkppUwkEgwMDFBfX09jY2PNQHZ2djBNk5mZGRoaGnYvcZZlsbS0VNN7k67rtLa2FkamZq0foP8APw/vuJS94F4AAAAASUVORK5CYII=","type":"image/png"},"$:/plugins/EvidentlyCube/AutoComplete/license":{"type":"text/vnd.tiddlywiki","text":"This plugin is licensed under the MIT license.\n\nCopyright 2022 Maurycy Zarzycki\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."},"$:/plugins/EvidentlyCube/AutoComplete/readme":{"type":"text/vnd.tiddlywiki","text":"[[Github|https://github.com/EvidentlyCube/TW5-PluginShowcase/tree/main/plugins/EvidentlyCube/TW5-AutoComplete]]\n\n---\n! Features\n\nA versatile and easy to use auto completion for TiddlyWiki:\n\n* Auto complete anything you want:\n** Tiddler titles\n** Field values\n** Any filter result\n* Define your own triggers\n** Customize the filter which retrieves the suggestions\n** Customize template used for inserting the selected suggestion\n** Customize how the suggestions are displayed in the completion window\n** Control auto-triggering separately for inputs and text areas\n* Clear interface for editing the triggers\n* Manually open auto complete with customizable keyboard shortcut\n\n!! Plugin compatibility\n\n* Official [[Code Mirror|https://tiddlywiki.com/plugins/tiddlywiki/codemirror/]] plugin\n * [[Streams|https://saqimtiaz.github.io/streams/]] by saqimtiaz\n\n! How to use\n\n* After installing head to the Control Panel and open the tab ''Evidently Cube''\n* Create a new trigger using the button\n** It will be filled with sensible defaults\n** Customize the trigger to your heart's content\n* At any time press <kbd>Ctrl+Space</kbd> right in front of a defined trigger to open the completion window manually\n** Or use a different keyboard shortcut you defined"},"$:/plugins/EvidentlyCube/AutoComplete/Config":{"rows":"8"},"$:/config/shortcuts/EC-AutoComplete":{"text":"ctrl+space"},"$:/config/ShortcutInfo/EC-AutoComplete":{"text":"Triggers completion of Auto Complete plugin\n"},"$:/plugins/EvidentlyCube/AutoComplete/completion-api.js":{"text":"{const r='$:/temp/AutoComplete/completion-data';var i=['$:/config/shortcuts/EC-AutoComplete','$:/config/shortcuts-linux/EC-AutoComplete','$:/config/shortcuts-not-linux/EC-AutoComplete','$:/config/shortcuts-mac/EC-AutoComplete','$:/config/shortcuts-not-mac/EC-AutoComplete','$:/config/shortcuts-windows/EC-AutoComplete','$:/config/shortcuts-not-windows/EC-AutoComplete'];function t(){this.isActive=!1,this.activeState={trigger:null,lastQuery:null,selectedResult:-1,results:[],options:{}},this.options={triggers:[],triggerTiddlers:[]},this._loadOptions(),this._updateTriggerList(this._getTriggerTiddlerList()),document.addEventListener('keydown',this._handleGlobalKeydownCapture.bind(this),!0),$tw.wiki.addEventListener('change',this._handleChange.bind(this))}function e(e){return $tw.rootWidget.makeFakeWidgetWithVariables?$tw.rootWidget.makeFakeWidgetWithVariables(e):{getVariable:function(t){return void 0!==e[t]?e[t]:''}}}t.prototype._handleGlobalKeydownCapture=function(t){this.isActive&&'Escape'===t.key&&(this.finishCompletion(),t.stopImmediatePropagation(),t.preventDefault())},t.prototype.getMatchingTrigger=function(e,i,r){var s=null===e||''===e;for(let t=0;t<this.options.triggers.length;t++){var o=this.options.triggers[t];if((s||o.autoTriggerInput||'INPUT'!==i)&&((s||o.autoTriggerTextArea||'TEXTAREA'!==i)&&(!e||o.triggerLastCharacter===e))){var a=r(o.trigger.length);if(a===o.trigger)return o}}return null},t.prototype.startCompletion=function(t,e,i){this.isActive=!0,this.activeState.trigger=t,this.activeState.lastQuery=null,this.activeState.selectedResult=0,this.activeState.results=[],this.activeState.options=i||{},this.updateQuery('');e=`left: ${e.left.toFixed(4)}px; top: ${e.top.toFixed(4)}px`;$tw.wiki.setText(r,'show',null,'1'),$tw.wiki.setText(r,'style',null,e),$tw.wiki.setText(r,'display-filter',null,t.displayFilter),$tw.wiki.setText(r,'edited-tiddler',null,i.editedTiddler||''),void 0!==i.windowID?$tw.wiki.setText(r,'show-window',null,i.windowID):$tw.wiki.setText(r,'show-window',null,'-1')},t.prototype.finishCompletion=function(){this.activeState.options.onFinish&&this.activeState.options.onFinish(),this.isActive=!1,this.activeState.trigger=null,this.activeState.lastQuery=null,this.activeState.selectedResult=-1,this.activeState.results=[],$tw.wiki.setText(r,'show',null,'0')},t.prototype.updateQuery=function(t){t!==this.activeState.lastQuery&&(this.activeState.lastQuery=t,this.activeState.selectedResult=0,t=$tw.wiki.filterTiddlers(this.activeState.trigger.filter,e({editedTiddler:this.activeState.options.editedTiddler||'',query:t})),this.activeState.results=t,$tw.wiki.setText(r,'list',null,this.activeState.results),$tw.wiki.setText(r,'index',null,1))},t.prototype.changeSelection=function(t){this.activeState.selectedResult+=t,this.activeState.selectedResult<0?this.activeState.selectedResult=this.activeState.results.length-1:this.activeState.selectedResult>=this.activeState.results.length&&(this.activeState.selectedResult=0),$tw.wiki.setText(r,'index',null,this.activeState.selectedResult+1)},t.prototype.getCompletedTemplate=function(t){var t=this.activeState.trigger.insertTemplate.replace(/\\$option\\$/g,t),e=t.indexOf('$caret$'),t=t.replace(/\\$caret\\$/g,'');return{text:t,caretIndex:-1!==e?e:t.length}},t.prototype.getSelected=function(){var t=this.activeState.results[this.activeState.selectedResult]||'';return t?$tw.wiki.filterTiddlers(this.activeState.trigger.transformFilter,e({currentTiddler:t})):''},t.prototype.setSelectionByValue=function(t){t=this.activeState.results.indexOf(t);-1!==t&&(this.activeState.selectedResult=t)},t.prototype.getClicked=function(t){return t.target&&t.target.classList.contains('ec_ac-link')?t.target.innerText:null},t.prototype.isManualTrigger=function(t){return $tw.keyboardManager.checkKeyDescriptors(t,this.options.manualTriggerKeyInfo)},t.prototype._handleChange=function(t){$tw.utils.hopArray(t,i)&&this._loadOptions();var e=this._getTriggerTiddlerList();($tw.utils.hopArray(t,e)||$tw.utils.hopArray(t,this.options.triggerTiddlers))&&this._updateTriggerList(e)},t.prototype._loadOptions=function(){this.options.manualTriggerKeyInfo=$tw.keyboardManager.parseKeyDescriptors('((EC-AutoComplete))',{wiki:this.wiki})},t.prototype._getTriggerTiddlerList=function(){return $tw.wiki.getTiddlersWithTag('$:/tags/EC/AutoComplete/Trigger')},t.prototype._updateTriggerList=function(t){this.options.triggers=[],this.options.triggerTiddlers=t;for(var e=0;e<t.length;e++){var i=t[e],i=$tw.wiki.getTiddler(i).fields,r=i.trigger,s=i.filter,o=i.template;s&&o&&r&&this.options.triggers.push({filter:i.filter,displayFilter:i['display-filter'],transformFilter:i['transform-filter']||'[<currentTiddler>]',trigger:r,triggerLastCharacter:r.charAt(r.length-1),insertTemplate:o,autoTriggerInput:'1'===String(i['auto-trigger-input']),autoTriggerTextArea:'1'===String(i['auto-trigger-textarea'])})}},exports.EC_AutoComplete=t}","type":"application/javascript","module-type":"library"},"$:/plugins/EvidentlyCube/AutoComplete/completion-window.js":{"text":"'use strict';exports.name='evidentlycube-tiddlercompletion-window',exports.platforms=['browser'],exports.after=['windows'],exports.synchronous=!0,exports.startup=function(){const d=$tw.rootWidget.eventListeners['tm-open-window'];$tw.rootWidget.addEventListener('tm-open-window',function(e){d(e);var t=e.param||e.tiddlerTitle,e=(e.paramObject||{}).windowID||t,t=$tw.windows[e],n=$tw.wiki.parseTiddler('$:/plugins/EvidentlyCube/AutoComplete/window');function o(e){i.refresh(e)}const i=$tw.wiki.makeWidget(n,{document:t.document,parentWidget:$tw.rootWidget,variables:{'tv-window-id':e}});t.document._ecAcWindowID=e,$tw.wiki.addEventListener('change',o),t.addEventListener('beforeunload',function(e){$tw.wiki.removeEventListener('change',o)},!1),i.render(t.document.body,t.document.body.firstChild)})}","type":"application/javascript","module-type":"startup"},"$:/plugins/EvidentlyCube/AutoComplete/completion.js":{"text":"'use strict';exports.name='evidentlycube-tiddlercompletion',exports.platforms=['browser'],exports.after=['startup'],exports.before=['render'],exports.synchronous=!0,exports.startup=function(){if(!$tw.node){var e={sequence:function(t,r){return function(){var e=t.apply(this,arguments);return r.apply(this,arguments),e}},preventable:function(e,t){return function(){if(!1!==t.apply(this,arguments))return e.apply(this,arguments)}}},t=new(require('$:/plugins/EvidentlyCube/AutoComplete/completion-api.js').EC_AutoComplete);require('$:/plugins/EvidentlyCube/AutoComplete/integration-core.js').patch(t,e);try{require('$:/plugins/EvidentlyCube/AutoComplete/integration-codemirror.js').patch(t,e)}catch(e){}}}","type":"application/javascript","module-type":"startup"},"$:/plugins/EvidentlyCube/AutoComplete/integration-codemirror.js":{"text":"exports.patch=function(r,e){var t=require('$:/plugins/tiddlywiki/codemirror/edit-codemirror.js')['edit-codemirror'],n=-1,o=null,a=null,c=-1;function s(e,t,i){(a=(o=t).getInputField().ownerDocument).addEventListener('mousedown',l,!0),c=e.trigger.length,n=t.getCursor(),r.startCompletion(e,function(e,t){e=e.charCoords(t);return{left:e.left,top:e.bottom}}(t,n),{onFinish:u,windowID:t.getInputField().ownerDocument._ecAcWindowID,editedTiddler:i.editedTiddler||''})}function l(e){var t=e.target;r.isActive&&o&&t&&t.classList.contains('ec_ac-link')&&(t=t.getAttribute('data-value'),r.setSelectionByValue(t),d(r.getSelected()),e.preventDefault(),e.stopImmediatePropagation())}function u(){a.removeEventListener('keydown',l,!0),a=o=null}function d(e){var e=r.getCompletedTemplate(e),t={line:n.line,ch:n.ch-c},i=o.getCursor();o.replaceRange(e.text,t,i),o.setCursor({line:n.line,ch:n.ch-c+e.caretIndex}),r.finishCompletion()}t.prototype.render=e.sequence(t.prototype.render,function(){this.engine.cm.on('keydown',function(i,e){if(r.isActive)switch(e.key){case'ArrowUp':case'ArrowDown':r.changeSelection('ArrowUp'===e.key?-1:1),e.stopImmediatePropagation(),e.preventDefault();break;case'Enter':var t=r.getSelected();t?d(t):r.finishCompletion(),e.stopImmediatePropagation(),e.preventDefault();break;default:r.isManualTrigger(e)&&(e.stopImmediatePropagation(),e.preventDefault())}else{var n;r.isManualTrigger(e)&&(n=r.getMatchingTrigger('','',function(e){var t=i.getCursor(),e={line:t.line,ch:Math.max(0,t.ch-e)};return i.getRange(e,t)}))&&(s(n,i,{editedTiddler:this.editTitle}),e.preventDefault(),e.stopImmediatePropagation())}}.bind(this)),this.engine.cm.on('blur',function(){r.isActive&&r.finishCompletion()}.bind(this)),this.engine.cm.on('change',function(i,e){e=function(e,t){if(!t||!t.text||1!==t.text.length||'+input'!==t.origin)return'';t=t.text[0],e=e.getOption('autoCloseBrackets');if(e){e=(e.pairs||'()[]{}\\'\\'\"\"').indexOf(t);if(-1!==e&&e%2==0)return t.substring(0,1)}return t}(i,e);!r.isActive&&null!==e&&''!==e&&(n=i.getCursor(),e=r.getMatchingTrigger(e,'TEXTAREA',function(e){var t=i.getCursor(),e={line:t.line,ch:Math.max(0,t.ch-e)};return i.getRange(e,t)}))&&s(e,o=i,{editedTiddler:this.editTitle})}.bind(this)),this.engine.cm.on('cursorActivity',function(e){var t;r.isActive&&e.hasFocus()&&((t=e.getCursor()).line<n.line||t.ch<n.ch?r.finishCompletion():r.updateQuery(e.getRange(n,t)))}.bind(this))})};","type":"application/javascript","module-type":"library"},"$:/plugins/EvidentlyCube/AutoComplete/integration-core.js":{"text":"exports.patch=function(s,e){var t=require('$:/core/modules/widgets/edit-text.js')['edit-text'],n=require('$:/core/modules/editor/engines/simple.js').SimpleEngine,o=require('$:/core/modules/editor/engines/framed.js').FramedEngine,d=require('$:/plugins/EvidentlyCube/AutoComplete/textarea-caret-position.js').getCaretCoordinates,u=-1,c=null,p=null,g=null,f=-1;function i(e,t,n){var o,i,r,a,l;p=t.ownerDocument,g=p.defaultView.top.document,p.addEventListener('keydown',h,!0),g.addEventListener('mousedown',v,!0),c=t,f=e.trigger.length,u=t.selectionStart,s.startCompletion(e,(e=c.getBoundingClientRect(),o=(o=c.getRootNode()).defaultView,i=d(c,u),r={left:-c.scrollLeft,top:-c.scrollTop},a=function(e){var t=e.getRootNode();if(t!==document)for(var n=t.defaultView.parent.document.querySelectorAll('iframe'),o=0;o<n.length;o++){var i=n[o];if(i.contentDocument===t)return i}return null}(c),l=function(e){return e?e.getBoundingClientRect():{top:0,left:0}}(a),a=a?{left:a.ownerDocument.defaultView.scrollX,top:a.ownerDocument.defaultView.scrollY}:{left:0,top:0},{left:(e=function(e){var t={left:0,top:0};for(const n of e)t.left+=n.left,t.top+=n.top;return t}([e,i,l,a,r])).left+o.scrollX,top:e.top+o.scrollY+i.height}),{onFinish:m,windowID:t.ownerDocument.defaultView.top.document._ecAcWindowID,editedTiddler:n})}function m(){p.removeEventListener('keydown',h,!0),g.removeEventListener('mousedown',v,!0),g=p=c=null}function v(e){var t=e.target;s.isActive&&t&&t.classList.contains('ec_ac-link')&&(t=t.getAttribute('data-value'),s.setSelectionByValue(t),w(s.getSelected()),e.preventDefault(),e.stopImmediatePropagation())}function h(e){if(s.isActive)switch(e.key){case'Escape':s.finishCompletion(),e.stopImmediatePropagation(),e.preventDefault();break;case'Enter':var t;e.ctrlKey||e.shiftKey||e.altKey||((t=s.getSelected())?w(t):s.finishCompletion(),e.stopImmediatePropagation(),e.preventDefault())}}function r(t){var e;s.isActive||null===t.data||''===t.data||(e=s.getMatchingTrigger(t.data,t.target.tagName,function(e){return t.target.value.substr(t.target.selectionStart-e,e)}))&&(c=t.target,i(e,t.target,this.widget.editTitle))}function a(e){s.isActive&&s.finishCompletion()}function l(e){s.isActive&&(!c||c.selectionStart<u?s.finishCompletion():s.updateQuery(c.value.substring(u,c.selectionStart)))}function w(e){var e=s.getCompletedTemplate(e),t=u-f,n=c.selectionStart;c.getRootNode().execCommand?(c.selectionStart=t,c.selectionEnd=n,c.getRootNode().execCommand('insertText',!1,e.text)):c.value=c.value.substr(0,t)+e.text+c.value.substr(n),c.selectionStart=c.selectionEnd=u-f+e.caretIndex,s.finishCompletion()}document._ecAcWindowID='',t.prototype.render=e.sequence(t.prototype.render,function(){this.engine.domNode.addEventListener('blur',a),this.engine.domNode.addEventListener('keyup',l),this.editShowToolbar||$tw.utils.addEventListeners(this.engine.domNode,[{name:'keydown',handlerObject:this,handlerMethod:'handleKeydownEvent'}])}),t.prototype.handleKeydownEvent=e.preventable(t.prototype.handleKeydownEvent,function(t){if(s.isActive)switch(t.key){case'ArrowUp':case'ArrowDown':return s.changeSelection('ArrowUp'===t.key?-1:1),t.stopImmediatePropagation(),t.preventDefault(),!1}else{var e;s.isManualTrigger(t)&&(e=s.getMatchingTrigger('',t.target.tagName,function(e){return t.target.value.substr(t.target.selectionStart-e,e)}))&&i(e,t.target,this.editTitle)}}),n.prototype.handleInputEvent=e.preventable(n.prototype.handleInputEvent,r),o.prototype.handleInputEvent=e.preventable(o.prototype.handleInputEvent,r)};","type":"application/javascript","module-type":"library"},"$:/plugins/EvidentlyCube/AutoComplete/Settings":{"tags":"$:/tags/EvidentlyCube/SettingsTab","caption":"Auto Complete","text":"\\define action-new-trigger()\n<$action-createtiddler $basetitle={{{[[$:/tags/EC/AutoComplete/Trigger]tagging[]!is[draft]count[]add[1]addprefix[$:/EvidentlyCube/Trigger/]]}}}tags=\"$:/tags/EC/AutoComplete/Trigger\"caption={{{[[$:/tags/EC/AutoComplete/Trigger]tagging[]!is[draft]count[]add[1]addprefix[Unnamed trigger ]]}}}trigger=[[ filter=\"[all[tiddlers]!is[system]!is[draft]search:title<query>]\"display-filter=\"[<currentTiddler>]\"template=[[$option$]]$caret$ auto-trigger-textarea=1>\n\t<$action-navigate $to=<<createTiddler-title>>scroll=yes/>\n\n\\end\n\\define action-open-keyboard-shortcuts()<$action-setfield $tiddler=\"$:/state/tab-1749438307\"text=\"$:/core/ui/ControlPanel/KeyboardShortcuts\"/>\n\\define comp-open-keyboard-shortcuts()\n<$button class=\"tc-tiddlylink tc-tiddlylink-resolves ec_ac-pointer\"actions=<<action-open-keyboard-shortcuts>>tag=a>Keyboard Shortcuts</$button>\n\n\\end\nConfiguration for the [[Auto Complete|$:/plugins/EvidentlyCube/AutoComplete]] plugin.\n\n! Registered Triggers\n\n<ul>\n\t<$list filter='[[$:/tags/EC/AutoComplete/Trigger]tagging[]!is[draft]sortan[title]sortan[caption]]'>\n\t\t<li><$link><$view field=caption><$view field=title/></$view></$link> (Trigger <code>{{!!trigger}}</code>)</li>\n\t</$list>\n\t<li><$button actions=<<action-new-trigger>>>Create a new trigger</$button></li>\n</ul>\n\n! Config\n\n<table>\n<colgroup>\n\t<col width=60%>\n</colgroup>\n<tbody>\n<tr>\n\t<td align=center>\n\t\t''Displayed results''<br>\n\t\t//Maximum number of results to display in the auto complete window, must be between 1 and 99//\n\t</td>\n\t<td>\n\t\t<$edit-text tiddler='$:/plugins/EvidentlyCube/AutoComplete/Config'field=rows default=8/>\n\t\t<$list filter='[{$:/plugins/EvidentlyCube/AutoComplete/Config!!rows}floor[]compare:number:lt[1]][{$:/plugins/EvidentlyCube/AutoComplete/Config!!rows}floor[]compare:number:gt[99]]+[count[]!match[0]]'>\n\t\t\t<div class=tc-error>Must be a number between 1 and 99</div>\n\t\t</$list>\n\t</td>\n</tr>\n<tr>\n\t<td align=center>\n\t\t''Keyboard Shortcut''<br>\n\t\t//Use this keyboard shortcut right in front of a trigger to manually open the completion window; can be changed in <<comp-open-keyboard-shortcuts>>tab//\n\t</td>\n\t<td>\n\t<$list filter='$:/config/shortcuts/ $:/config/shortcuts-mac/ $:/config/shortcuts-not-mac/ $:/config/shortcuts-linux/ $:/config/shortcuts-not-linux/ $:/config/shortcuts-windows/ $:/config/shortcuts-not-windows/'>\n\t\t<$macrocall $output='text/html'shortcuts={{{[{!!title}addsuffix[EC-AutoComplete]get[text]]}}}prefix='<kbd>'separator='</kbd> <kbd>'suffix='</kbd>'$name=displayshortcuts/>\n\t</$list>\n\t</td>\n</tr>\n</tbody>\n"},"$:/plugins/EvidentlyCube/AutoComplete/template-cascade":{"tags":"$:/tags/ViewTemplateBodyFilter","list-after":"$:/config/ViewTemplateBodyFilters/system","text":"[tag[$:/tags/EC/AutoComplete/Trigger]then[$:/plugins/EvidentlyCube/AutoComplete/template]]"},"$:/plugins/EvidentlyCube/AutoComplete/template":{"text":"\\define must-be-defined(field name)\n<$list filter=\"[{!!$field$}match[]]\">\n\t<span class=tc-error>\n\t\t$name$ must be defined\n\t</span>\n\n\\end\n\\define must-be-valid-filter(field)\n<$let base-filter={{!!$field$}}suffix=\" +[limit[1]]\"filter={{{[<base-filter>addsuffix<suffix>]}}}>\n<$list filter=<<filter>>>\n\t<$list filter={{{[{!!title}prefix[Filter error]]}}}>\n\t\t<span class=tc-error>\n\t\t\t<$text text={{!!title}}/>\n\t\t</span>\n\t</$list>\n</$list>\n\n\\end\n<div class=ec_ac-options>\n<h1>Auto complete trigger</h1>\n\n<p>This tiddler defines a trigger for Auto Complete plugin.</p>\n\n<table>\n<colgroup>\n\t<col width=50%>\n</colgroup>\n<tbody>\n<tr>\n\t<td align=center>\n\t\t''Caption:''<br>\n\t\t<p class=ec_ac-muted>\n\t\t\tOptional caption displayed in the Control Panel instead of the tiddler name\n\t\t</p>\n\t</td>\n\t<td><$edit-text class=ec-tc-disabled field=caption default=''placeholder=Caption.../></td>\n</tr>\n<tr>\n\t<td align=center>\n\t\t''Description:''<br>\n\t\t<p class=ec_ac-muted>\n\t\t\tA description of this trigger to make it easier to keep things clean.\n\t\t</p>\n\t</td>\n\t<td><$edit-text class=ec-tc-disabled default=''placeholder='Description for this trigger...'field=text/></td>\n</tr>\n<tr>\n\t<td align=center>\n\t\t''Trigger:''<br>\n\t\t<p class=ec_ac-muted>\n\t\t\tDefines the text which will trigger auto completion.<br>\n\t\t\tFor example `[[` will cause the auto completion to appear after you type `[[` in any text field.\n\t\t</p>\n\t</td>\n\t<td>\n\t\t<$edit-text class=ec-tc-disabled field=trigger placeholder=Trigger.../>\n\t\t<$list filter='[[$:/tags/EC/AutoComplete/Trigger]tagging[]field:trigger{!!trigger}]-[{!!title}]+[nth[]]'>\n\t\t\t<span class=tc-error>\n\t\t\t\tTrigger already used in: <<currentTiddler>>\n\t\t\t</span>\n\t\t</$list>\n\t\t<<must-be-defined trigger Trigger>>\n\t</td>\n</tr>\n<tr>\n\t<td align=center>\n\t\t''Suggestion Filter:''<br>\n\t\t<p class=ec_ac-muted>\n\t\t\tThis filter generates the list of options that will be displayed in the auto completion.<br>\n\t\t\tUse variable `query` to inject the typed text.<br>\n\t\t\tVariable `<editedTiddler>` contains the name of the tiddler that is being modified by the widget that triggered auto completion.\n\t\t</p>\n\t</td>\n\t<td>\n\t\t<$edit-text class=ec-tc-disabled tag=textarea field=filter placeholder=Filter.../>\n\t\t<<must-be-valid-filter filter>>\n\t\t<<must-be-defined filter Filter>>\n\t</td>\n</tr>\n<tr>\n\t<td align=center>\n\t\t''Display Filter:''<br>\n\t\t<p class=ec_ac-muted>\n\t\t\tAdvanced feature!<br>\n\t\t\tTransforms how the suggestion will be displayed in auto complete window.<br>\n\t\t\t`<currentTiddler>` contains the suggestion being displayed.<br>\n\t\t\tVariable `<editedTiddler>` contains the name of the tiddler that is being modified by the widget that triggered auto completion.\n\t\t</p>\n\t</td>\n\t<td>\n\t\t<$edit-text class=ec-tc-disabled tag=textarea placeholder='Display filter...'field=display-filter/>\n\t\t<<must-be-valid-filter display-filter>>\n\t\t<<must-be-defined display-filter'Display filter'>>\n\t</td>\n</tr>\n<tr>\n\t<td align=center>\n\t\t''Transform Filter:''<br>\n\t\t<p class=ec_ac-muted>\n\t\t\tAdvanced feature!<br>\n\t\t\tTransform the selected suggestion before it's inserted.<br>\n\t\t\tIt's useful when you want to insert tiddler's text or data indexes.<br>\n\t\t\t`<currentTiddler>` contains the suggestion selected.\n\t\t</p>\n\t</td>\n\t<td>\n\t\t<$edit-text class=ec-tc-disabled tag=textarea placeholder='[<currentTiddler>]'field=transform-filter/>\n\t\t<<must-be-valid-filter transform-filter>>\n\t</td>\n</tr>\n<tr>\n\t<td align=center>\n\t\t''Template:''<br>\n\t\t<p class=ec_ac-muted>\n\t\t\tA template that is inserted when you select an option from auto completion.<br>\n\t\t\t`$option$` will be replaced by the selected option. <br>\n\t\t\t`$caret$` will put the caret on that position after insertion.\n\t\t</p>\n\t</td>\n\t<td>\n\t\t<$edit-text class=ec-tc-disabled field=template placeholder=Template.../>\n\t\t<<must-be-defined template Template>>\n\t</td>\n</tr>\n<tr>\n\t<td align=center>\n\t\t''Auto trigger on Inputs:''<br>\n\t\t<p class=ec_ac-muted>\n\t\t\tIf checked auto completion will automatically open as soon as you type the ''trigger'' in a single-line text input.<br>\n\t\t\tOtherwise you need to open it manually with a keyboard shortcut.\n\t\t</p>\n\t</td>\n\t<td>\n\t\t<$checkbox field=auto-trigger-input checked=1>&nbsp;Auto trigger on Inputs</$checkbox>\n\t</td>\n</tr>\n<tr>\n\t<td align=center>\n\t\t''Auto trigger on Text Areas:''<br>\n\t\t<p class=ec_ac-muted>\n\t\t\tIf checked auto completion will automatically open as soon as you type the ''trigger'' in a multi-line text input.<br>\n\t\t\tOtherwise you need to open it manually with a keyboard shortcut.\n\t\t</p>\n\t</td>\n\t<td>\n\t\t<$checkbox field=auto-trigger-textarea checked=1>&nbsp;Auto trigger on Text Areas</$checkbox>\n\t</td>\n</tr>\n</tbody>\n</table>\n\n<h1>Test the filter</h1>\n\n<$let temp=<<qualify'$:/temp/completion-test'>>rows={{{[{$:/plugins/EvidentlyCube/AutoComplete/Config!!rows}floor[]!match[0]else[8]min[99]max[1]]}}}default-transform-filter='[<currentTiddler>]'filter-suffix=' +[limit<rows>]'display-filter={{!!display-filter}}transform-filter={{{[{!!transform-filter}!match[]else<default-transform-filter>]}}}filter={{{[{!!filter}addsuffix<filter-suffix>]}}}>\n\t''Query:'' <$edit-text tag=input class=ec-tc-disabled tiddler=<<temp>>field=query default=''placeholder=Test.../>\n\n\t<p class=ec_ac-muted>Only the first <<rows>> results will be displayed.</p>\n\n\t<table>\n\t<thead>\n\t<tr>\n\t\t<th>Suggestion</th>\n\t\t<th>Displays as</th>\n\t\t<th>After insertion</th>\n\t</tr>\n\t</thead>\n\t<tbody>\n\t<$let query={{{[<temp>get[query]]}}}editedTiddler=<<temp>>>\n\t\t<$list filter=<<filter>>emptyMessage='<tr><td colspan=3 class=ec_ac-muted>No results'>\n\t\t\t<tr>\n\t\t\t\t<td><$text text={{{[{!!title}]}}}/></td>\n\t\t\t\t<td><$text text={{{[{!!title}subfilter<display-filter>]}}}/></td>\n\t\t\t\t<td><$text text={{{[{!!title}subfilter<transform-filter>]}}}/></td>\n\t\t\t</tr>\n\t\t</$list>\n\t</$let>\n\t</tbody>\n\t</table>\n</$let>\n</div>\n"},"$:/plugins/EvidentlyCube/AutoComplete/Style":{"tags":"$:/tags/Stylesheet","type":"text/vnd.tiddlywiki","text":".ec_ac-muted {\n\tcolor: <<colour foreground>>;\n\topacity: 0.75;\n\tfont-style: italic;\n}\n\n.ec_ac-completion {\n\tposition: absolute;\n\tbackground: <<colour modal-background>>;\n\tborder: 2px solid <<colour modal-border>>;\n\tpadding: 2em 1em;\n\tbox-shadow: 2px 2px 10px rgba(0, 0, 0, 0.5);\n\tz-index: 100000;\n\tmin-width: 250px;\n}\n\n.ec_ac-dots-top {\n\tpointer-events: none;\n\tuser-select: none;\n\tposition: absolute;\n\tfont-size: 2em;\n\ttext-align: center;\n\ttop: 0;\n\tleft: 0;\n\tright: 0;\n}\n.ec_ac-dots-bottom {\n\tpointer-events: none;\n\tuser-select: none;\n\tposition: absolute;\n\tfont-size: 2em;\n\ttext-align: center;\n\tbottom: 0.5em;\n\tleft: 0;\n\tright: 0;\n}\n.ec_ac-completion li {\n\tlist-style: none;\n}\n.ec_ac-completion .label {\n\tcolor: <<colour muted-foreground>>;\n}\n.ec_ac-completion .ec_ac-link {\n\tcolor: <<colour tiddler-link-foreground>>;\n\tcursor: pointer;\n}\n.ec_ac-completion .ec_ac-link.selected,\n.ec_ac-completion .ec_ac-link:hover\n{\n\tbackground-color: <<colour tiddler-link-foreground>>;\n\tcolor: <<colour background>>;\n}\n\n.ec_ac-options table {\n\twidth: 100%;\n}\n\n.ec_ac-options p {\n\tmargin-top: 0;\n\tmargin-bottom: 0;\n}\n.ec_ac-options input:not([type=\"checkbox\"]),\n.ec_ac-options textarea {\n\tdisplay: block;\n\twidth: 100%;\n\tmargin-top: 7px;\n\tmargin-bottom: 7px;\n}\n\n.ec_ac-options .tc-error a {\n\tcolor: white;\n\ttext-decoration: underline;\n}\n\n.ec_ac-pointer {\n\tcursor: pointer;\n}"},"$:/plugins/EvidentlyCube/AutoComplete/textarea-caret-position.js":{"text":"{const s=['direction','boxSizing','width','height','overflowX','overflowY','borderTopWidth','borderRightWidth','borderBottomWidth','borderLeftWidth','borderStyle','paddingTop','paddingRight','paddingBottom','paddingLeft','fontStyle','fontVariant','fontWeight','fontStretch','fontSize','fontSizeAdjust','lineHeight','fontFamily','textAlign','textTransform','textIndent','textDecoration','letterSpacing','wordSpacing','tabSize','MozTabSize'],b='undefined'!=typeof window&&null!=window.mozInnerScreenX;exports.getCaretCoordinates=function(t,e,o){var i,r,n,o=o&&o.debug||!1,d=(o&&(d=document.querySelector('#input-textarea-caret-position-mirror-div'))&&d.parentNode.removeChild(d),document.createElement('div')),a=(d.id='input-textarea-caret-position-mirror-div',document.body.appendChild(d),d.style),p=window.getComputedStyle?window.getComputedStyle(t):t.currentStyle,l='INPUT'===t.nodeName;a.whiteSpace='pre-wrap',l||(a.wordWrap='break-word'),a.position='absolute',o||(a.visibility='hidden');for(const g of s)l&&'lineHeight'===g?'border-box'===p.boxSizing?(n=parseInt(p.height),i=(r=parseInt(p.paddingTop)+parseInt(p.paddingBottom)+parseInt(p.borderTopWidth)+parseInt(p.borderBottomWidth))+parseInt(p.lineHeight),a.lineHeight=i<n?n-r+'px':n===i?p.lineHeight:0):a.lineHeight=p.height:l||'width'!==g||'border-box'!==p.boxSizing?a[g]=p[g]:(r=parseFloat(p.borderLeftWidth)+parseFloat(p.borderRightWidth),n=b?parseFloat(p[g])-r:t.clientWidth+r,a[g]=n+'px');b?t.scrollHeight>parseInt(p.height)&&(a.overflowY='scroll'):a.overflow='hidden',d.textContent=t.value.substring(0,e),l&&(d.textContent=d.textContent.replace(/\\s/g,' '));var h=document.createElement('span'),e=(h.textContent=t.value.substring(e)||'.',d.appendChild(h),{top:h.offsetTop+parseInt(p.borderTopWidth),left:h.offsetLeft+parseInt(p.borderLeftWidth),height:parseInt(p.lineHeight)});return o?h.style.backgroundColor='#aaa':document.body.removeChild(d),e}}","type":"application/javascript","module-type":"library"},"$:/plugins/EvidentlyCube/AutoComplete/window":{"tags":"$:/tags/PageTemplate","text":"<$let window-id={{{[<tw-window-id>else[]]}}}count={{{[list[$:/temp/AutoComplete/completion-data]count[]]}}}base-limit={{$:/plugins/EvidentlyCube/AutoComplete/Config!!rows}}limit={{{[<base-limit>add[1]compare:number:eq<count>else<base-limit>]}}}half-limit={{{[<limit>divide[2]ceil[]]}}}max-offset={{{[<count>subtract<limit>]}}}selected={{$:/temp/AutoComplete/completion-data!!index}}offset={{{[<selected>subtract<half-limit>min<max-offset>max[0]]}}}editedTiddler={{$:/temp/AutoComplete/completion-data!!edited-tiddler}}>\n\n<$list filter=\"[{$:/temp/AutoComplete/completion-data!!show}]=[{$:/temp/AutoComplete/completion-data!!show-window}match<tv-window-id>then[1]]=[{$:/temp/AutoComplete/completion-data!!show-window}match[-1]then[1]]+[match[1]count[]match[2]]\"variable=ignore>\n\n<ul style={{$:/temp/AutoComplete/completion-data!!style}}class=ec_ac-completion><$list filter=\"[<offset>compare:number:gt[0]]\"><li class=ec_ac-dots-top>...</li></$list><$list filter=\"[list[$:/temp/AutoComplete/completion-data]rest<offset>first<limit>]\"emptyMessage=\"<li class=label>No results\"counter=index><$list filter=\"[<index>add<offset>match<selected>]\"emptyMessage=\"\n\t\t\t<li data-value={{!!title}}class=ec_ac-link><$text text={{{[{!!title}subfilter{$:/temp/AutoComplete/completion-data!!display-filter}]}}}/>\"variable=_><li class=\"ec_ac-link selected\"data-value={{!!title}}><$text text={{{[{!!title}subfilter{$:/temp/AutoComplete/completion-data!!display-filter}]}}}/></li></$list></$list><$list filter=\"[<offset>compare:number:lt<max-offset>]\"><li class=ec_ac-dots-bottom>..."}},"ugly":true}